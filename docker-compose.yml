services:
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
      - "8000:8000"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - frontend_node_modules:/app/apps/frontend/node_modules
      - /app/node_modules/.pnpm
      - huggingface_cache:/root/.cache/huggingface
    working_dir: /app
    command: pnpm turbo run dev --parallel --cache-dir=.turbo
    environment:
      - CHOKIDAR_USEPOLLING=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mydatabase
      - PYTHONPATH=/app/apps/backend/src
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - S3_BUCKET=doclin-storage
      - LLM_PROVIDER=ollama
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=llama3:8b
      - VECTOR_MODEL=all-mpnet-base-v2
      - NODE_ENV=development
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      # ollama:
      #   condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # MinIO Web UI
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 minio minio123; do
        echo '...waiting for minio'
        sleep 1
      done;
      /usr/bin/mc mb myminio/my-bucket --ignore-existing;
      /usr/bin/mc policy set public myminio/my-bucket;
      exit 0;
      "
    networks:
      - app-network

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=http://localhost:5173,http://localhost:8000
      - OLLAMA_MODEL=llama3:8b
      - OLLAMA_NUM_PREDICT=1024
      - OLLAMA_CTX=4096
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 10g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  # Uncomment for GPU support
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

  # Optional: Model initialization for Ollama

  # Optional: Redis for caching/sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network

volumes:
  pgdata:
  minio_data:
  ollama_data:
  redis_data:
  node_modules:
  frontend_node_modules:
  huggingface_cache:

networks:
  app-network:
    driver: bridge
